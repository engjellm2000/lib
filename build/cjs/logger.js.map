{"version":3,"file":"logger.js","names":["_winston","_interopRequireDefault","require","_winstonElasticsearch","e","__esModule","default","esTransformer","logData","message","level","timestamp","meta","winstonLogger","elasticsearchNode","name","options","console","handleExceptions","json","colorize","elasticsearch","transformer","clientOpts","node","log","maxRetries","requestTimeout","sniffOnStart","apm","esTransport","ElasticsearchTransport","logger","winston","createLogger","exitOnError","defaultMeta","service","transports","Console","exports"],"sources":["../../src/logger.ts"],"sourcesContent":["import winston, { Logger } from 'winston';\r\nimport { ElasticsearchTransport, LogData } from 'winston-elasticsearch';\r\n\r\n// Custom transformer function\r\nconst esTransformer = (logData: LogData) => {\r\n  // Customize this to match the expected structure for Elasticsearch\r\n  return {\r\n    message: logData.message,\r\n    level: logData.level,\r\n    timestamp: logData.timestamp,\r\n    // Add any additional fields you need\r\n    ...logData.meta,\r\n  };\r\n};\r\n\r\nexport const winstonLogger = (elasticsearchNode: string, name: string, level: string): Logger => {\r\n  const options = {\r\n    console: {\r\n      level,\r\n      handleExceptions: true,\r\n      json: false,\r\n      colorize: true,\r\n    },\r\n    elasticsearch: {\r\n      level,\r\n      transformer: esTransformer,  // Use the custom transformer\r\n      clientOpts: {\r\n        node: elasticsearchNode,\r\n        log: level,\r\n        maxRetries: 2,\r\n        requestTimeout: 10000,\r\n        sniffOnStart: false,\r\n      },\r\n      apm: {},  // Required, can be an empty object if not using APM\r\n    },\r\n  };\r\n\r\n  const esTransport = new ElasticsearchTransport(options.elasticsearch);\r\n  const logger: Logger = winston.createLogger({\r\n    exitOnError: false,\r\n    defaultMeta: { service: name },\r\n    transports: [\r\n      new winston.transports.Console(options.console),\r\n      esTransport,\r\n    ],\r\n  });\r\n\r\n  return logger;\r\n}\r\n"],"mappings":";;;;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,qBAAA,GAAAD,OAAA;AAAwE,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAExE;AACA,MAAMG,aAAa,GAAIC,OAAgB,IAAK;EAC1C;EACA,OAAO;IACLC,OAAO,EAAED,OAAO,CAACC,OAAO;IACxBC,KAAK,EAAEF,OAAO,CAACE,KAAK;IACpBC,SAAS,EAAEH,OAAO,CAACG,SAAS;IAC5B;IACA,GAAGH,OAAO,CAACI;EACb,CAAC;AACH,CAAC;AAEM,MAAMC,aAAa,GAAGA,CAACC,iBAAyB,EAAEC,IAAY,EAAEL,KAAa,KAAa;EAC/F,MAAMM,OAAO,GAAG;IACdC,OAAO,EAAE;MACPP,KAAK;MACLQ,gBAAgB,EAAE,IAAI;MACtBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDC,aAAa,EAAE;MACbX,KAAK;MACLY,WAAW,EAAEf,aAAa;MAAG;MAC7BgB,UAAU,EAAE;QACVC,IAAI,EAAEV,iBAAiB;QACvBW,GAAG,EAAEf,KAAK;QACVgB,UAAU,EAAE,CAAC;QACbC,cAAc,EAAE,KAAK;QACrBC,YAAY,EAAE;MAChB,CAAC;MACDC,GAAG,EAAE,CAAC,CAAC,CAAG;IACZ;EACF,CAAC;EAED,MAAMC,WAAW,GAAG,IAAIC,4CAAsB,CAACf,OAAO,CAACK,aAAa,CAAC;EACrE,MAAMW,MAAc,GAAGC,gBAAO,CAACC,YAAY,CAAC;IAC1CC,WAAW,EAAE,KAAK;IAClBC,WAAW,EAAE;MAAEC,OAAO,EAAEtB;IAAK,CAAC;IAC9BuB,UAAU,EAAE,CACV,IAAIL,gBAAO,CAACK,UAAU,CAACC,OAAO,CAACvB,OAAO,CAACC,OAAO,CAAC,EAC/Ca,WAAW;EAEf,CAAC,CAAC;EAEF,OAAOE,MAAM;AACf,CAAC;AAAAQ,OAAA,CAAA3B,aAAA,GAAAA,aAAA","ignoreList":[]}